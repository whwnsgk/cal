
package com.twin.spring.calculator.controller;

import java.util.ArrayList;
import java.util.Stack;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
//계산기 코드 
/*
 * 2+3*5 
 * -> '2' '+' '3' '*' '5'
 * 피연산자 operarand 
 * 연산자 operator
 * -> 연산자 우선순위에 따라서 계산을 해야함
 * 3 * 5를 먼저 곱해야되겠지
 * 실제로 괄호를 치는건 아니지만 우선순위 괄호를 쳐야함
 * 2 + 15 
 *  피연산자와 연산자로 수식을 쪼개는데 이런걸 token 이라고 한다
 *  token 은 의미가 있는 단위 
 *  
 *  이항 연산자 (binary operator)
 *  2 + 3 / 3* 5
 *  단항 연산자 (unary operator)
 *  + 3   - 6 
 *  
 *  이항 연산자만 쓴다고 가정하자
 *  
 *  우선 2+3*5 와같이 infix 수식 : 연산자가 두 피 연산자 사이에 있는 형식으로 작성할시 infix 라고 한다
 *  postfix 수식으로 바꾸자
 *  최종결과값으로 바꾸는게 훨씬 쉬워질것이다
 *  2 3 5 * + 이런식으로 바꿀꺼임
 *  
 *  1. 우선순위에 따른 괄호 치기
 *  2. 연산자의 오른쪽괄호 다음으로 연산자 이동
 *   (2 + (3 * 5))
 *   (2 (3 5) *) + 
 *   
 *   
 *   infix 는 반대로 앞으로 연산자를 보내는거임
 *   
 *   
 *   postfix 예시
 *   ex)
 *   3* (2 + 5 ) * 4 
 *   infix 니까 postfix 로 바꿔보자
 *   
 *   1. 괄호치기
 *   2. ((3 * (2 + 5))*4)
 *   3. ((3 (2 5)+)* 4)*
 *   4. 3 2 5 + * 4 *
 *   이것이 postfix 수식이다
 *   
 *   
 *   입력 : + - * ( ) 숫자 영문자로 구성된 infix 수식이 들어올수 있는데
 *   출력은 : postfix로 내보내자
 *   
 *   A + B * C
 *   토큰으로 쪼갯다고 가정하자
 *   A  +  B  *  C
 *   postfix로 바꾸자
 *   A B C * + 
 *   로 바꿈
 *   
 *   1. 피 연산자의 순서는 그대로다
 *   2. 연잔자 는 자기 위치를 파악해야한다
 *   3. 다른 피연산자에 의해서 결정이 된다
 *   
 *   더하기 기준으로는 곱하기가 우선순위가 높다 곱하기가 더하기보다 먼저 나와야하고
 *   더하기는 곱하기 다음으로 나와야한다.
 *   스택에서 연산자들을 넣어놓고 대기 타다가 자기보다 우선순위가 낮은게 오면 그때 나오면 된다
 *   
 *   A * B + C 
 *   
 *   곱하기는 스택에 넣어두고
 *   더하기가 오면 어 내가 먼저 되야 하네
 *   그럼 곱하기가 스택에서 나가자
 *   
 *    순서
 *    1. A
 *    2. 곱하기는 스택으로
 *    3. B
 *    4. 더하기도 스택으로
 *    5. 더하기보다 우선순위가 높은애들을 전부 pop  시킨다
 *    6. 곱하기는  pop 되었고
 *    7. 더하기는  push
 *    8.  그다음은  C
 *    9. 다 썻으니까 stack 에 남아있는건 전부 pop
 *    
 *    a b * c + 
 *    
 *    왼쪽괄호는 우선순위가 제일 낮다
 *    오른쪽 괄호는 우선순위가 제일 높다
 *    
 *    (a + b) * c
 *    면
 *    왼쪽괄호는 일단 들어서 대기하고
 *    오른쪽괄호가 나올때까지 대기 하고 있다가
 *    오른쪽 괄호 등장시 그 사이에 있는 모든 연산자를 전부 pop 한다
 *    
 *    outStack : = list 이다
 *    연산자가 들어있는 스택 = opStack
 *    
 *    for each token in expression for-each 문
 *    if (token == operand)
 *    	outstack.append (token)
 *    el if token == '('
 *      opstack.push(token)
 *    if token == ')'
 *      opstack.pop 계속
 *      '('를 만날때까지
 *    '(' 를 pop 할때까지 
 *    if token in '+_/ ' 
		opstack 에 token 보다 우선순위 연산자 pop 
	    그다음에 자신은 push
 *    
 *   opstack 에 남아있는거 전부  pop 해서
 *   out stack 에 append 하기
 *   
 *   ex)
 *    6 + (3 - 2) * 4 
 *    
 *    outstack (리스트)
 *    6 3 2 - 4 * +  
 *    
 *    
 *    opstack (stack)
 *    
 *    
 *    ------자 이제 계산을 해볼까?---------
 *    여기에서는 피 연 산 자 stack 만듬
 *    
 *    if token == operand
 *     s. push (token)
 *     
 *    if toekn in (operator) ; 
 *   
 */


@Controller
public class CalController {
	
	@ResponseBody
	@RequestMapping("calculator.cl")
	public double calculator(String expression) {
		//System.out.println("ajax 어서오고");
		//System.out.println(expression);
		char c = ' ';
	    Stack opStack = new LinkedListStack();
	    StringBuilder sb = new StringBuilder();
		
		
		
		
		return 0 ; 
	}
}
